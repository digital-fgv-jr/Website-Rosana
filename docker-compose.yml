services:
  db_postgres:
    container_name: db_postgres
    image: postgres:17.6-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app_net
  
  backend:
    container_name: backend
    build: 
      context: ./backend
      dockerfile: Dockerfile
    volumes:
      - ./backend:/usr/src/app
      - static_volume:/usr/src/app/static
      - media_volume:/usr/src/app/media
    env_file:
      - ./.env
    depends_on:
      db_postgres:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app_net

  nginx:
    container_name: nginx
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "82:80"
    volumes:
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    env_file:
      - ./.env
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - app_net
  
volumes:
  postgres_data:
  static_volume:
  media_volume:

networks:
  app_net:
    driver: bridge
